{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://booking-extension/webpack/bootstrap","webpack://booking-extension/webpack/runtime/make namespace object","webpack://booking-extension/./src/background/background.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function updateBadge(count) {\n    chrome.action.setBadgeText({ text: count });\n}\nfunction generateId() {\n    return Math.random().toString(36).substring(2, 12);\n}\nchrome.runtime.onInstalled.addListener(() => {\n    chrome.contextMenus.create({\n        id: \"addItemList\",\n        title: \"Send to Side Panel\",\n        contexts: [\"selection\"],\n    });\n    // @ts-ignore\n    chrome.sidePanel.setPanelBehavior({ openPanelOnActionClick: true });\n    chrome.storage.sync.get(\"tasks\", (obj) => {\n        const tasks = obj.tasks;\n        updateBadge(tasks.length.toString());\n    });\n});\nfunction addTask(taskText, websiteUrl) {\n    if (taskText.trim() !== \"\") {\n        chrome.storage.sync.get(\"tasks\", function (data) {\n            const tasks = data.tasks || [];\n            const timeAdded = Date.now();\n            const id = generateId();\n            const type = \"confirmed\"; // or 'booked'\n            const isDuplicate = tasks.find((t) => t.text === taskText);\n            if (isDuplicate)\n                return;\n            tasks.unshift({\n                text: taskText,\n                website: websiteUrl,\n                timeAdded: timeAdded,\n                id,\n                type,\n            });\n            chrome.storage.sync.set({ tasks: tasks }, function () {\n                // console.log('added', tasks);\n                updateBadge(tasks.length.toString());\n            });\n        });\n    }\n}\nfunction handleAddTask(text, websiteUrl) {\n    addTask(text, websiteUrl);\n    chrome.runtime.sendMessage({ action: \"updatePanel\" });\n}\nchrome.contextMenus.onClicked.addListener(function (clickData) {\n    if (clickData.menuItemId == \"addItemList\" && clickData.selectionText) {\n        const selectedText = clickData.selectionText.trim();\n        const websiteUrl = clickData.pageUrl;\n        // console.log({ selectedText, websiteUrl });\n        addTask(selectedText, websiteUrl);\n        chrome.runtime.sendMessage({ action: \"updatePanel\" });\n    }\n});\nchrome.commands.onCommand.addListener((command) => {\n    if (command === \"add-text-to-side-panel\") {\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            chrome.tabs.sendMessage(tabs[0].id, { action: \"addToSidePanel\" });\n        });\n    }\n});\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"sendUpdated\") {\n        chrome.runtime.sendMessage({ action: \"updatePanel\" });\n    }\n    if (message.action === \"sendToContent\") {\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            chrome.tabs.sendMessage(tabs[0].id, { action: \"highlightMatches\" });\n        });\n    }\n    if (message.action === \"addToSidePanelByDrag\") {\n        chrome.tabs.query({\n            active: true,\n            currentWindow: true,\n        }, ([currentTab]) => {\n            handleAddTask(message.selectedText, currentTab.url);\n        });\n    }\n});\nexport {};\n"],"names":[],"sourceRoot":""}