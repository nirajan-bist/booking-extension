{"version":3,"file":"contentScript.js","mappingszIA;AACA;AACA;AACA;AACA","sources":["webpack://booking-extension/./src/contentScript/index.ts","webpack://booking-extension/webpack/before-startup","webpack://booking-extension/webpack/startup","webpack://booking-extension/webpack/after-startup"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst key = \"Shift\"; // Change to whatever Control, Alt etc\nlet isKeyPressed = false;\ndocument.addEventListener(\"keydown\", handleKeyDown);\ndocument.addEventListener(\"mouseup\", handleMouseUp);\nfunction generateId() {\n    return Math.random().toString(36).substring(2, 12);\n}\nconst getTasks = () => new Promise((res, rej) => {\n    chrome.storage.sync.get(\"tasks\", (data) => {\n        const tasks = data.tasks || [];\n        res(tasks);\n    });\n});\nfunction addTask(taskText, websiteUrl) {\n    if (taskText.trim() !== \"\") {\n        chrome.storage.sync.get(\"tasks\", function (data) {\n            const tasks = data.tasks || [];\n            const timeAdded = Date.now();\n            const id = generateId();\n            const type = \"confirmed\"; // or 'booked'\n            const isDuplicate = tasks.find((t) => t.text === taskText);\n            if (isDuplicate)\n                return;\n            tasks.unshift({\n                text: taskText,\n                website: websiteUrl,\n                timeAdded: timeAdded,\n                id,\n                type,\n            });\n            chrome.storage.sync.set({ tasks: tasks });\n        });\n    }\n}\nfunction runScript(message, sender, sendResponse) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const action = message.action;\n        console.log(message);\n        if (action === \"addToSidePanel\") {\n            const selectedText = message.value || window.getSelection().toString();\n            const websiteUrl = location.href;\n            console.log(\"got it\");\n            addTask(selectedText, websiteUrl);\n            chrome.runtime.sendMessage({ action: \"sendUpdated\" });\n        }\n        if (action === \"highlightMatches\") {\n            const host = location.host;\n            if (host === \"mail.google.com\")\n                highlightMatches();\n        }\n    });\n}\nchrome.runtime.onMessage.addListener(runScript);\nconst regexPattern = /[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}/g; // Update pattern as per requirement\nfunction extractMatches(data) {\n    const matchList = [];\n    data.forEach((item) => {\n        const matches = item.text.match(regexPattern);\n        if (matches) {\n            matchList.push(...matches);\n        }\n    });\n    return matchList;\n}\nfunction highlightMatches() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const tasks = yield getTasks();\n        const matches = extractMatches(tasks);\n        // console.log('matches', matches);\n        const subjectElements = document.querySelectorAll(\".bog\");\n        subjectElements.forEach((subjectElement) => {\n            let hasHighlight = false;\n            matches.forEach((email) => {\n                if (subjectElement.textContent.includes(email)) {\n                    hasHighlight = true;\n                    subjectElement.style.backgroundColor = \"yellow\";\n                    subjectElement.style.fontWeight = \"bold\";\n                }\n            });\n            if (!hasHighlight) {\n                subjectElement.style.backgroundColor = \"\";\n                subjectElement.style.fontWeight = \"\";\n            }\n        });\n    });\n}\nconst observer = new MutationObserver(highlightMatches);\nobserver.observe(document.body, { childList: true, subtree: true });\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    setTimeout(highlightMatches, 3000); // Delay to ensure Gmail's dynamic content has\n    document.addEventListener(\"dragstart\", (event) => {\n        const selection = window.getSelection().toString();\n        if (selection.length > 0) {\n            // event.dataTransfer.setData(\"text/plain\", selection + \"sdf\");\n        }\n    });\n});\nfunction sendItemToSidePanel() {\n    var _a;\n    if (window.getSelection && ((_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.type) === \"Range\") {\n        const selectedText = window.getSelection().toString();\n        const websiteUrl = location.href;\n        addTask(selectedText, websiteUrl);\n        chrome.runtime.sendMessage({ action: \"sendUpdated\" });\n    }\n}\nfunction handleKeyDown(event) {\n    if (event.key === key) {\n        isKeyPressed = true;\n        checkTextSelection();\n    }\n}\nfunction handleMouseUp() {\n    checkTextSelection();\n}\nfunction checkTextSelection() {\n    const selectedText = window.getSelection().toString().trim();\n    if (isKeyPressed && selectedText.length > 0) {\n        const websiteUrl = location.href;\n        addTask(selectedText, websiteUrl);\n        chrome.runtime.sendMessage({ action: \"sendUpdated\" });\n    }\n}\n// Reset key status on keyup\ndocument.addEventListener(\"keyup\", (event) => {\n    if (event.key === \"Shift\") {\n        isKeyPressed = false;\n    }\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/contentScript/index.ts\"]();\n",""],"names":[],"sourceRoot":""}